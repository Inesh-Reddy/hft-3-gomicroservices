// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: ticker.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import type {
  handleServerStreamingCall,
  Metadata,
  UntypedServiceImplementation,
} from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'ticker';

export interface TickerRequest {
  symbol: string;
}

export interface TickerUpdate {
  exchange: string;
  symbol: string;
  price: string;
  volume: string;
  eventTime: number;
}

export const TICKER_PACKAGE_NAME = 'ticker';

function createBaseTickerRequest(): TickerRequest {
  return { symbol: '' };
}

export const TickerRequest: MessageFns<TickerRequest> = {
  encode(
    message: TickerRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.symbol !== '') {
      writer.uint32(10).string(message.symbol);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TickerRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTickerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.symbol = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseTickerUpdate(): TickerUpdate {
  return { exchange: '', symbol: '', price: '', volume: '', eventTime: 0 };
}

export const TickerUpdate: MessageFns<TickerUpdate> = {
  encode(
    message: TickerUpdate,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.exchange !== '') {
      writer.uint32(10).string(message.exchange);
    }
    if (message.symbol !== '') {
      writer.uint32(18).string(message.symbol);
    }
    if (message.price !== '') {
      writer.uint32(26).string(message.price);
    }
    if (message.volume !== '') {
      writer.uint32(34).string(message.volume);
    }
    if (message.eventTime !== 0) {
      writer.uint32(40).int64(message.eventTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TickerUpdate {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTickerUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.exchange = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.symbol = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.price = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.volume = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.eventTime = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface TickerServiceClient {
  streamTicker(
    request: TickerRequest,
    metadata?: Metadata,
  ): Observable<TickerUpdate>;
}

export interface TickerServiceController {
  streamTicker(
    request: TickerRequest,
    metadata?: Metadata,
  ): Observable<TickerUpdate>;
}

export function TickerServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['streamTicker'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('TickerService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('TickerService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const TICKER_SERVICE_NAME = 'TickerService';

export type TickerServiceService = typeof TickerServiceService;
export const TickerServiceService = {
  streamTicker: {
    path: '/ticker.TickerService/StreamTicker',
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: TickerRequest): Buffer =>
      Buffer.from(TickerRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): TickerRequest =>
      TickerRequest.decode(value),
    responseSerialize: (value: TickerUpdate): Buffer =>
      Buffer.from(TickerUpdate.encode(value).finish()),
    responseDeserialize: (value: Buffer): TickerUpdate =>
      TickerUpdate.decode(value),
  },
} as const;

export interface TickerServiceServer extends UntypedServiceImplementation {
  streamTicker: handleServerStreamingCall<TickerRequest, TickerUpdate>;
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER');
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error('Value is smaller than Number.MIN_SAFE_INTEGER');
  }
  return num;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
